expect_equal(prob22_result,0.4752 ,tolerance = 1e-3)
})
# 23. What is the probability of an outcome of less than or equal to three heads (prob23_result)?
# Calculating the probabilities for 0 to 3 heads
prob_0_heads <- choose(4, 0) * (0.6)^0 * (0.4)^4
prob_1_heads <- choose(4, 1) * (0.6)^1 * (0.4)^3
prob_2_heads <- choose(4, 2) * (0.6)^2 * (0.4)^2
prob_3_heads <- choose(4, 3) * (0.6)^3 * (0.4)^1
# Summing the probabilities for 0 to 3 heads
prob23_result <- prob_0_heads + prob_1_heads + prob_2_heads + prob_3_heads
prob23_result
#Test Problem 23
test_that("Testing Problem 23", {
expect_equal(prob23_result, 0.8704,tolerance = 1e-3)
})
# 24. Create a bar chart where the x-axis is the outcome and the y-axis is the probability.
library(ggplot2)
# Plotting the bar chart
ggplot(num_heads_prob, aes(x = factor(Num_Heads), y = Total_Probability)) +
geom_bar(stat = "identity") +
xlab("Number of Heads") +
ylab("Probability") +
ggtitle("Probability Distribution of Number of Heads in 4 Coin Flips") +
theme_minimal()
# 25. What is the probability that they will win exactly 10 games (prob25_result)?
# Calculate the probability of winning all 5 home games
prob_home_games <- 0.75^5
# Calculate the probability of winning all 5 away games
prob_away_games <- 0.5^5
# Calculate the probability of winning all 10 games
prob25_result <- prob_home_games * prob_away_games
prob25_result
#Test Problem 25
test_that("Testing Problem 25", {
expect_equal(prob25_result, .007415771,tolerance = 1e-4)
})
# 26. What is the probability that they will win more than one game (prob26_result)?
# Calculate the probability of winning zero home and away games
prob_0_home_games <- choose(5, 0) * 0.75^0 * 0.25^5
prob_0_away_games <- choose(5, 0) * 0.5^0 * 0.5^5
prob_0_games <- prob_0_home_games * prob_0_away_games
# Calculate the probability of winning exactly one home or away game
prob_1_home_0_away_games <- choose(5, 1) * 0.75^1 * 0.25^4 * prob_0_away_games
prob_0_home_1_away_games <- choose(5, 1) * 0.5^1 * 0.5^4 * prob_0_home_games
# Sum these probabilities
prob_0_or_1_games <- prob_0_games + prob_1_home_0_away_games + prob_0_home_1_away_games
# Calculate the probability of winning more than one game
prob26_result <- 1 - prob_0_or_1_games
# 26. What is the probability that they will win more than one game (prob26_result)?
# Calculate the probability of winning zero home and away games
prob_0_home_games <- choose(5, 0) * 0.75^0 * 0.25^5
prob_0_away_games <- choose(5, 0) * 0.5^0 * 0.5^5
prob_0_games <- prob_0_home_games * prob_0_away_games
# Calculate the probability of winning exactly one home or away game
prob_1_home_0_away_games <- choose(5, 1) * 0.75^1 * 0.25^4 * prob_0_away_games
prob_0_home_1_away_games <- choose(5, 1) * 0.5^1 * 0.5^4 * prob_0_home_games
# Sum these probabilities
prob_0_or_1_games <- prob_0_games + prob_1_home_0_away_games + prob_0_home_1_away_games
# Calculate the probability of winning more than one game
prob26_result <- 1 - prob_0_or_1_games
prob26_result
#Test Problem 26
test_that("Testing Problem 26", {
expect_equal(prob26_result, .9998474,tolerance = 1e-3)
})
# 27. How many different ways could you pick five games at random and have three home games and two away games (prob27_result)?
# Calculate the number of combinations for 3 home games and 2 away games
combinations_home <- choose(5, 3)
combinations_away <- choose(5, 2)
# Calculate the total number of ways to have 3 home games and 2 away games
prob27_result <- combinations_home * combinations_away
prob27_result
#Test Problem 27
test_that("Testing Problem 27", {
expect_equal(prob27_result, 100)
})
source("C:/Users/m.achilefu/Downloads/ALY/module5/project5_tests.R", echo=TRUE)
#Test Problem 15
test_that("Testing Problem 15", {
expect_equal(prob15_result, 8329620)
})
#Test Problem 16
test_that("Testing Problem 16", {
expect_equal(prob16_result,0.006353231 ,tolerance = 1e-3)
})
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
#Test Problem 21
test_that("Testing Problem 21", {
expect_equal(prob21_result,0.3456,tolerance = 1e-3 )
})
#Test Problem 22
test_that("Testing Problem 22", {
expect_equal(prob22_result,0.4752 ,tolerance = 1e-3)
})
#Test Problem 23
test_that("Testing Problem 23", {
expect_equal(prob23_result, 0.8704,tolerance = 1e-3)
})
#Test Problem 25
test_that("Testing Problem 25", {
expect_equal(prob25_result, .007415771,tolerance = 1e-4)
})
#Test Problem 26
test_that("Testing Problem 26", {
expect_equal(prob26_result, .9998474,tolerance = 1e-3)
})
#Test Problem 27
test_that("Testing Problem 27", {
expect_equal(prob27_result, 100)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Calculate the number of total combinations for drawing 3 balls from 10
total_combinations <- choose(10, 3)
# Calculate the number of combinations for drawing the 3 green balls that spell "ACE" from 4 green balls
ace_combinations <- choose(4, 3)
# Calculate the probability that the three balls that spell "ACE" are all green
prob16_result <- ace_combinations / total_combinations
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Calculate the number of total combinations for drawing 3 balls from 10
total_combinations <- choose(10, 3)
# Calculate the number of combinations for drawing the 3 green balls that spell "ACE" from 4 green balls
ace_combinations <- choose(4, 3)
# Calculate the probability that the three balls that spell "ACE" are all green
prob16_result <- ace_combinations / total_combinations
prob16_result
#Test Problem 16
test_that("Testing Problem 16", {
expect_equal(prob16_result,0.006353231 ,tolerance = 1e-3)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Filter for green balls with labels "A", "C", and "E"
green_a_balls <- nrow(subset(ball_dataset, color == "green" & label == "A"))
green_c_balls <- nrow(subset(ball_dataset, color == "green" & label == "C"))
green_e_balls <- nrow(subset(ball_dataset, color == "green" & label == "E"))
# Total number of balls
total_balls <- nrow(ball_dataset)
# Calculating the probability
prob16_result <- (green_a_balls / total_balls) * (green_c_balls / (total_balls - 1)) * (green_e_balls / (total_balls - 2))
print(prob16_result)
# 15. [Challenge] If the order drawn does not matter, in how many ways could you draw three balls that spell “ACE” (prob15_result)?
# Read the dataset into a data frame
ball_dataset <- read.csv("ball-dataset.csv")
# Create a frequency table for the 'label' column
freq_label <- table(ball_dataset$label)
# Extract the number of balls with each label
label_a_balls <- freq_label["A"]
label_c_balls <- freq_label["C"]
label_e_balls <- freq_label["E"]
# Number of ways to draw "A", "C", "E" in that order without replacement
prob14_result <- label_a_balls * label_c_balls * label_e_balls
# Number of ways to draw "ACE" when the order does not matter
prob15_result <- factorial(3) * prob14_result  # 3! = 3 x 2 x 1
prob15_result <- as.numeric(unname(prob15_result))
prob15_result
# 14. [Challenge] When making three draws without replacement, how many ways could you result in the letters “A”, “C”, “E”, in that order (prob14_result)?
# Calculate the number of balls with each label
freq_label <- table(ball_dataset$label)
# Extract the counts for labels 'A', 'C', and 'E'
label_A_balls <- freq_label["A"]
label_C_balls <- freq_label["C"]
label_E_balls <- freq_label["E"]
# Calculate the number of ways to draw 'A', 'C', 'E' in that order without replacement
prob14_result <- label_A_balls * label_C_balls * label_E_balls
# Print the result
prob14_result <- as.numeric(unname(prob14_result))
prob14_result
#Test Problem 14
test_that("Testing Problem 14", {
expect_equal(prob14_result, 1388270)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Counts for green balls that spell 'A', 'C', and 'E'
green_A_balls <- 3
green_C_balls <- 2
green_E_balls <- 4
# Calculate the number of ways to get a green 'ACE' in that order
green_ACE_ways <- green_A_balls * green_C_balls * green_E_balls
# Assuming you already have prob14_result
# Calculate the probability that the three balls that spell 'ACE' are all green
prob16_result <- green_ACE_ways / prob14_result
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Counts for green balls that spell 'A', 'C', and 'E'
green_A_balls <- 3
green_C_balls <- 2
green_E_balls <- 4
# Calculate the number of ways to get a green 'ACE' in that order
green_ACE_ways <- green_A_balls * green_C_balls * green_E_balls
# Assuming you already have prob14_result
# Calculate the probability that the three balls that spell 'ACE' are all green
prob16_result <- green_ACE_ways / prob14_result
prob16_result
#Test Problem 16
test_that("Testing Problem 16", {
expect_equal(prob16_result,0.006353231 ,tolerance = 1e-3)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
print(paste("Green A balls: ", green_A_balls))
print(paste("Green C balls: ", green_C_balls))
print(paste("Green E balls: ", green_E_balls))
print(paste("Ways to get green ACE: ", green_ACE_ways))
print(paste("Total ways to get ACE (prob14_result): ", prob14_result))
print(paste("Calculated prob16_result: ", prob16_result))
# 15. [Challenge] If the order drawn does not matter, in how many ways could you draw three balls that spell “ACE” (prob15_result)?
# Read the dataset into a data frame
ball_dataset <- read.csv("ball-dataset.csv")
# Create a frequency table for the 'label' column
freq_label <- table(ball_dataset$label)
# Extract the number of balls with each label
label_a_balls <- freq_label["A"]
label_c_balls <- freq_label["C"]
label_e_balls <- freq_label["E"]
# Number of ways to draw "A", "C", "E" in that order without replacement
prob14_result <- label_a_balls * label_c_balls * label_e_balls
# Number of ways to draw "ACE" when the order does not matter
prob15_result <- factorial(3) * prob14_result  # 3! = 3 x 2 x 1
prob15_result <- as.numeric(unname(prob15_result))
prob15_result
#Test Problem 15
test_that("Testing Problem 15", {
expect_equal(prob15_result, 8329620)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Count the occurrences of each label that are also green in color
green_label_counts = df[df['color'] == 'green']['label'].value_counts()
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Read the dataset into a data frame
df <- read.csv("ball-dataset.csv")
# Count the occurrences of each label in the dataset
label_counts <- table(df$label)
# Count the occurrences of each label that are also green in color
green_label_counts <- table(df[df$color == 'green',]$label)
# Calculate the number of ways to draw "A", "C", "E" in that order without replacement
prob14_result <- label_counts['A'] * label_counts['C'] * label_counts['E']
# Calculate the number of ways to draw a green "A", "C", "E" in that order without replacement
prob16_result <- green_label_counts['A'] * green_label_counts['C'] * green_label_counts['E']
# Calculate the probability
if (prob14_result == 0) {
prob16_result <- 0  # Avoid division by zero
} else {
prob16_result <- prob16_result / prob14_result
}
# Print the result
print(paste("The probability that the three balls that spell 'ACE' are all green is:", prob16_result))
#Test Problem 16
test_that("Testing Problem 16", {
expect_equal(prob16_result,0.006353231 ,tolerance = 1e-3)
})
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Read the dataset into a data frame
df <- read.csv("ball-dataset.csv")
# Count the occurrences of each label in the dataset
label_counts <- table(df$label)
# Count the occurrences of each label that are also green in color
green_label_counts <- table(df[df$color == 'green',]$label)
# Calculate the number of ways to draw "A", "C", "E" in that order without replacement
prob14_result <- label_counts['A'] * label_counts['C'] * label_counts['E']
# Calculate the number of ways to draw a green "A", "C", "E" in that order without replacement
prob16_result <- green_label_counts['A'] * green_label_counts['C'] * green_label_counts['E']
# Calculate the probability
if (prob14_result == 0) {
prob16_result <- 0  # Avoid division by zero
} else {
prob16_result <- prob16_result / prob14_result
}
# Print the result
prob16_result
# 16. [Challenge] Consider your result for Problem 14. What is the probability that the three balls that spell “ACE” are all green (prob16_result)?
# Read the dataset into a data frame
df <- read.csv("ball-dataset.csv")
# Count the occurrences of each label in the dataset
label_counts <- table(df$label)
# Count the occurrences of each label that are also green in color
green_label_counts <- table(df[df$color == 'green',]$label)
# Calculate the number of ways to draw "A", "C", "E" in that order without replacement
prob14_result <- label_counts['A'] * label_counts['C'] * label_counts['E']
# Calculate the number of ways to draw a green "A", "C", "E" in that order without replacement
prob16_result <- green_label_counts['A'] * green_label_counts['C'] * green_label_counts['E']
# Calculate the probability
if (prob14_result == 0) {
prob16_result <- 0  # Avoid division by zero
} else {
prob16_result <- prob16_result / prob14_result
}
# Print the result
prob16_result <- as.numeric(unname(prob16_result))
prob16_result
#Test Problem 16
test_that("Testing Problem 16", {
expect_equal(prob16_result,0.006353231 ,tolerance = 1e-3)
})
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
factorial_func <- function(n) {
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
# Test the function
print(factorial_func(5))  # Expected output is 5 * 4 * 3 * 2 * 1 = 120
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
factorial_func <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
# Test the function with testthat package
test_that("Testing Problem 17", {
expect_equal(factorial_func(-5), -1)
expect_equal(factorial_func(3), 6)
expect_equal(factorial_func(0), 1)
expect_equal(factorial_func(6), 720)
})
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
factorial_func <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
# 17. Write the factorial function that computes the factorial of a given number.
factorial_func <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
factorial_func
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
# Define the custom factorial function
factorial_func <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
factorial_func
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
# Define the custom factorial function
factorial_func <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_func(n - 1))
}
}
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
# Define a custom factorial function to handle negative numbers
factorial_custom <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * factorial_custom(n - 1))
}
}
factorial_func
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
# 17. Write the factorial function that computes the factorial of a given number.
# Redefine the factorial function to handle negative numbers
factorial <- function(n) {
if (n < 0) {
return(-1)
}
if (n == 0) {
return(1)
} else {
return(n * Recall(n - 1))
}
}
factorial_func
#Test Problem 17
test_that("Testing Problem 17", {
expect_equal(factorial(-5), -1)
expect_equal(factorial(3), 6)
expect_equal(factorial(0), 1)
expect_equal(factorial(6), 720)
})
#Test Problem 14
test_that("Testing Problem 14", {
expect_equal(prob14_result, 1388270)
})
# 14. [Challenge] When making three draws without replacement, how many ways could you result in the letters “A”, “C”, “E”, in that order (prob14_result)?
# Calculate the number of balls with each label
freq_label <- table(ball_dataset$label)
# Extract the counts for labels 'A', 'C', and 'E'
label_A_balls <- freq_label["A"]
label_C_balls <- freq_label["C"]
label_E_balls <- freq_label["E"]
# Calculate the number of ways to draw 'A', 'C', 'E' in that order without replacement
prob14_result <- label_A_balls * label_C_balls * label_E_balls
# Print the result
prob14_result <- as.numeric(unname(prob14_result))
prob14_result
# 14. [Challenge] When making three draws without replacement, how many ways could you result in the letters “A”, “C”, “E”, in that order (prob14_result)?
# Calculate the number of balls with each label
freq_label <- table(ball_dataset$label)
# Extract the counts for labels 'A', 'C', and 'E'
label_A_balls <- freq_label["A"]
label_C_balls <- freq_label["C"]
label_E_balls <- freq_label["E"]
# Calculate the number of ways to draw 'A', 'C', 'E' in that order without replacement
prob14_result <- label_A_balls * label_C_balls * label_E_balls
# Print the result
prob14_result <- as.numeric(unname(prob14_result))
prob14_result
#Test Problem 14
test_that("Testing Problem 14", {
expect_equal(prob14_result, 1388270)
})
source("C:/Users/m.achilefu/Downloads/ALY/module5/project5_tests.R", echo=TRUE)
# Run this cell to check your answers
library(pacman)
p_load(testthat)
p_load(tidyverse)
test_file("project5_tests.R")
# Run this cell to check your answers
library(pacman)
p_load(testthat)
p_load(tidyverse)
test_file("project5_tests.R")
source("C:/Users/m.achilefu/Downloads/ALY/module5/project5_tests.R", echo=TRUE)

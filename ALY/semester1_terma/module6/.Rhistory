source("C:/Users/m.achilefu/Downloads/ALY/module6/project6_tests.R", echo=TRUE)
cat("\014") # clears console
rm(list = ls()) # clears global environment
try(dev.off(dev.list()["RStudioGD"]), silent = TRUE) # clears plots
try(p_unload(p_loaded(), character.only = TRUE), silent = TRUE) # clears packages
options(scipen = 100) # disables scientific notation for entire R session
# You should do this line only once in the entire course.
# install.packages("pacman")
library(pacman)
p_load(testthat)
p_load(tidyverse)
p_load(ggplot2)
# 1. What is the probability that the Red Sox will win exactly 5 games (prob1_result)?
# Given parameters
n_games <- 7         # Number of games
p_win <- 0.65        # Probability of winning a game
k_wins <- 5          # Number of wins in question
# Calculate probability using dbinom()
prob1_result <- dbinom(k_wins, n_games, p_win)
# Print result
prob1_result
# 2. Use data.frame() or tibble() to create a dataframe or tibble with each possible outcome and the probability of that outcome. Name your columns wins and probability (prob2_result).
# Given parameters
n_games <- 7
p_win <- 0.65
# Calculates probabilities for each possible outcome
probabilities <- dbinom(0:n_games, n_games, p_win)
# Creates a dataframe
prob2_result <- data.frame(wins = 0:n_games, probability = probabilities)
# Print result
prob2_result
# 3. What is the probability that the Red Sox will win fewer than 5 games (prob3_result)?
# Given parameters
n_games <- 7
p_win <- 0.65
k_wins_less_than_5 <- 4
# Calculates cumulative probability using pbinom()
prob3_result <- pbinom(k_wins_less_than_5, n_games, p_win)
# Prints result
prob3_result
# 4. What is the probability that the Red Sox will win between 3 and 5 games inclusively (prob4_result)?
# Given parameters
n_games <- 7
p_win <- 0.65
k_wins_up_to_5 <- 5
k_wins_up_to_2 <- 2
# Calculates cumulative probability for up to 5 wins and up to 2 wins
cumulative_prob_up_to_5 <- pbinom(k_wins_up_to_5, n_games, p_win)
cumulative_prob_up_to_2 <- pbinom(k_wins_up_to_2, n_games, p_win)
# Calculates probability for between 3 and 5 wins inclusively
prob4_result <- cumulative_prob_up_to_5 - cumulative_prob_up_to_2
# Prints result
prob4_result
# 5. What is the probability of the Red Sox winning more than 4 games (prob5_result)?
# Given parameters
n_games <- 7
p_win <- 0.65
k_wins_up_to_4 <- 4
# Calculates cumulative probability for up to 4 wins
cumulative_prob_up_to_4 <- pbinom(k_wins_up_to_4, n_games, p_win)
# Calculates probability for more than 4 wins
prob5_result <- 1 - cumulative_prob_up_to_4
# Prints result
prob5_result
# 6. What is the theoretical expected value of the number of wins for the Red Sox in a 7-game series (prob6_result)?
# Given parameters
n_games <- 7
p_win <- 0.65
# Calculates theoretical expected value
prob6_result <- n_games * p_win
# Prints result
prob6_result
# 7. What is the theoretical variance of the number of wins for the Red Sox in a 7-game series (prob7_result)?
# Given parameters
n_games <- 7
p_win <- 0.65
# Calculates theoretical variance
prob7_result <- n_games * p_win * (1 - p_win)
# Prints result
prob7_result
# 8. Use rbinom() to generate 1,000 random values for the number of wins by the Red Sox in a 7-game series. Use set.seed(10) before generating the random values.
# Sets seed for reproducibility
set.seed(10)
# Given parameters
n_games <- 7
p_win <- 0.65
n_simulations <- 1000
# Generates 1,000 random values using rbinom()
random_wins <- rbinom(n_simulations, n_games, p_win)
# Prints random values
random_wins
# 9. Compute the sample mean of the 1,000 random values (prob9_result).
# Sets seed for reproducibility
set.seed(10)
# Given parameters
n_games <- 7
p_win <- 0.65
n_simulations <- 1000
# Generates 1,000 random values using rbinom()
random_wins <- rbinom(n_simulations, n_games, p_win)
# Computes the sample mean
prob9_result <- mean(random_wins)
# Prints result
prob9_result
# 10. Compute the sample variance of the 1,000 random values (prob10_result).
# Set seed for reproducibility
set.seed(10)
# Given parameters
n_games <- 7
p_win <- 0.65
n_simulations <- 1000
# Generates 1,000 random values using rbinom()
random_wins <- rbinom(n_simulations, n_games, p_win)
# Computes the sample variance
prob10_result <- var(random_wins)
# Prints result
prob10_result
# 11. What is the probability that an employee will receive exactly 6 calls in the next hour (prob11_result)?
# Given parameters
lambda <- 7  # Average rate of calls per hour
# Calculates probability for exactly 6 calls
prob11_result <- dpois(6, lambda)
# Prints result
prob11_result
# 12. What is the probability that an employee will receive 40 or fewer calls in the next 8 hours (prob12_result)?
# Given parameters
lambda_8_hours <- 7 * 8  # Average rate of calls for 8 hours
# Calculates cumulative probability for 40 or fewer calls
prob12_result <- ppois(40, lambda_8_hours)
# Prints result
prob12_result
# 13. Assuming that there are 5 employees working eight-hour shifts, what is the probability that they will meet the quota of 275 or more calls during the shift (prob13_result)?
# Given parameters
lambda_8_hours_5_employees <- 7 * 8 * 5  # Average rate of calls for 8 hours for 5 employees
# Calculates cumulative probability for 274 or fewer calls
cumulative_prob_up_to_274 <- ppois(274, lambda_8_hours_5_employees)
# Calculates probability for 275 or more calls
prob13_result <- 1 - cumulative_prob_up_to_274
# Prints result
prob13_result
# 14. If one employee is sick, what is the probability that the remaining team will still meet the quota of 275 or more calls during their shift (prob14_result)?
# Given parameters
lambda_8_hours_4_employees <- 7 * 8 * 4  # Average rate of calls for 8 hours for 4 employees
# Calculates cumulative probability for 274 or fewer calls
cumulative_prob_up_to_274 <- ppois(274, lambda_8_hours_4_employees)
# Calculates probability for 275 or more calls
prob14_result <- 1 - cumulative_prob_up_to_274
# Prints result
prob14_result
# 15. For a single employee working an 8-hour shift, how many calls are necessary for the day to be considered in the top 10% of days volume-wise (prob15_result)?
# Given parameters
lambda_8_hours <- 7 * 8  # Average rate of calls for 8 hours
# Calculates the 90th percentile of calls
prob15_result <- qpois(0.9, lambda_8_hours)
# Prints result
prob15_result
# 16. Use rpois() to generate 1,000 random values for the number of calls for a single employee during an 8-hour shift. Use a set.seed(15) before creating values.
# Sets seed for reproducibility
set.seed(15)
# Given parameters
lambda_8_hours <- 7 * 8  # Average rate of calls for 8 hours
n_simulations <- 1000
# Generates 1,000 random values using rpois()
random_calls <- rpois(n_simulations, lambda_8_hours)
random_wins
# 17. Compute the sample mean of the 1,000 random values (prob17_result).
# Calculates sample mean of the 1,000 random values
prob17_result <- mean(random_calls)
# Print result
prob17_result
# 18. Compute the sample variance of the 1,000 random values (prob18_result).
# Calculates sample variance of the 1,000 random values
prob18_result <- var(random_calls)
# Prints result
prob18_result
# 19. What is the percentage of light bulbs with a lifespan of between 1,800 and 2,200 hours (prob19_result)?
# Given parameters
mean_lifespan <- 2000  # Mean life span in hours
std_dev <- 100  # Standard deviation in hours
# Calculates cumulative probability for lifespans up to 2,200 hours
cumulative_prob_up_to_2200 <- pnorm(2200, mean_lifespan, std_dev)
# Calculates cumulative probability for lifespans up to 1,800 hours
cumulative_prob_up_to_1800 <- pnorm(1800, mean_lifespan, std_dev)
# Calculates probability for lifespans between 1,800 and 2,200 hours
prob19_result <- (cumulative_prob_up_to_2200 - cumulative_prob_up_to_1800)  # in percentage
# Prints result
prob19_result
# 20. What is the percentage of light bulbs with a life span of more than 2,500 hours (prob20_result)?
# Given parameters
mean_lifespan <- 2000  # Mean life span in hours
std_dev <- 100  # Standard deviation in hours
# Calculates cumulative probability for lifespans up to 2,500 hours
cumulative_prob_up_to_2500 <- pnorm(2500, mean_lifespan, std_dev)
# Calculates probability for lifespans more than 2,500 hours
prob20_result <- 1 - cumulative_prob_up_to_2500
# Prints result in the scientific notation to match your test
print(formatC(prob20_result, format = "e", digits = 6))
# For testing
# prob20_result
# 21. Light bulbs that fall in the bottom 10% of life spans are considered defective and can be returned for a full refund. What is the maximum number of hours in a light bulb's life span for it to fall into the defective category? Round your result up to the nearest integer value (prob21_result)?
# Given parameters
mean_lifespan <- 2000  # Mean life span in hours
std_dev <- 100  # Standard deviation in hours
# Calculates the 10th percentile lifespan using qnorm()
prob21_result <- qnorm(0.10, mean_lifespan, std_dev)
# Rounds up to the nearest integer
prob21_result <- ceiling(prob21_result)
# Prints result
prob21_result
# 22. Use rnorm() to generate 10,000 random values for the life spans of manufactured light bulbs. Use set.seed(25) before generating the values. For the remaining problems, consider this the population of light bulbs.
# Sets seed for reproducibility
set.seed(25)
# Given parameters
mean_lifespan <- 2000  # Mean life span in hours
std_dev <- 100  # Standard deviation in hours
n <- 10000  # Number of random values to generate
# Generates 10,000 random lifespans using rnorm()
random_lifespans <- rnorm(n, mean_lifespan, std_dev)
# prints
random_lifespans
# 23. Compute the population mean for the random values (prob23_result).
# Computes the population mean using mean()
prob23_result <- mean(random_lifespans)
# Prints result
prob23_result
# 24. Compute the population standard deviation for the random values (prob24_result).
# Computes the population standard deviation using sd()
prob24_result <- sd(random_lifespans)
# Prints result
prob24_result
# 25. Take 1,000 different samples from the random values, where each sample contains 100 values. For each of the 1,000 different samples, compute the sample mean and store all 1,000 results in a vector. Use set.seed(1) before computing the samples (prob25_result).
# Sets seed for reproducibility
set.seed(1)
# Number of samples and sample size
num_samples <- 1000
sample_size <- 100
# Initializes an empty vector to store the sample means
prob25_result <- numeric(num_samples)
# Loops through to take 1,000 different samples and compute their means
for (i in 1:num_samples) {
sample_values <- sample(random_lifespans, sample_size)
prob25_result[i] <- mean(sample_values)
}
# prob25_result now contains the 1,000 sample means
# 26. With the result of the prior problem, create a histogram.
# Creates a histogram of the 1,000 sample means
hist(prob25_result, main="Histogram of Sample Means", xlab="Sample Mean", ylab="Frequency", col="lightblue", border="black")
# 27. Compute the mean of the of the values from problem 25 (prob27_result).
# Computes the mean of the 1,000 sample means
prob27_result <- mean(prob25_result)
# Prints result
prob27_result
# 28. Explore the distribution of flipper length of the Adélie penguin. What distribution does it most likely follow? Justify your decision with evidence from techniques learned in this course.
# Installs and loads the palmerpenguins package if it does not exist
if (!requireNamespace("palmerpenguins", quietly = TRUE)) {
install.packages("palmerpenguins")
}
library(palmerpenguins)
# Filters data for Adélie penguins and remove NA values
adelie_data <- subset(penguins, species == "Adelie")
adelie_data <- na.omit(adelie_data)
# Generates a histogram
hist(adelie_data$flipper_length_mm, main="Histogram of Adélie Penguin Flipper Length",
xlab="Flipper Length (mm)", ylab="Frequency", col="lightblue", border="black")
# Generates a boxplot
boxplot(adelie_data$flipper_length_mm, main="Boxplot of Adélie Penguin Flipper Length",
ylab="Flipper Length (mm)")
# Summaries statistics
summary(adelie_data$flipper_length_mm)
# Skewness and kurtosis
library(moments)
skewness(adelie_data$flipper_length_mm)
kurtosis(adelie_data$flipper_length_mm)
# 29. Explore the relationship between the flipper length and beak (bill) depth of the gentoo penguin. Justify any relationship you identify with evidence from techniques learned in this course.
# Install and load the palmerpenguins package if it does not exist
if (!requireNamespace("palmerpenguins", quietly = TRUE)) {
install.packages("palmerpenguins")
}
library(palmerpenguins)
# Filters data for Gentoo penguins and remove NA values
gentoo_data <- subset(penguins, species == "Gentoo")
gentoo_data <- na.omit(gentoo_data)
# Generates a scatter plot
plot(gentoo_data$flipper_length_mm, gentoo_data$bill_depth_mm,
main="Scatter plot of Flipper Length vs Bill Depth for Gentoo Penguins",
xlab="Flipper Length (mm)", ylab="Bill Depth (mm)",
pch=19, col=rgb(0,0,1,0.5))
# Computes the correlation coefficient
cor_value <- cor(gentoo_data$flipper_length_mm, gentoo_data$bill_depth_mm)
cor_value
# Fit a linear regression model
fit <- lm(bill_depth_mm ~ flipper_length_mm, data=gentoo_data)
summary(fit)
# Run this cell to check your answers
library(pacman)
p_load(testthat)
p_load(tidyverse)
p_load(ggplot2)
test_file("project6_tests.R")
source("C:/Users/m.achilefu/Downloads/ALY/module6/project6_tests.R", echo=TRUE)
source("C:/Users/m.achilefu/Downloads/ALY/module6/project6_tests.R", echo=TRUE)
source("C:/Users/m.achilefu/Downloads/ALY/module6/project6_tests.R", echo=TRUE)
